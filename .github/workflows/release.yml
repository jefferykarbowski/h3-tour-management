name: Create Release

# Grant permissions needed for creating releases
permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  push:
    branches:
      - main

jobs:
  check_version:
    name: Check for Version Update
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      create_release: ${{ steps.check_version.outputs.create_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get_version
        run: |
          # Hardcode the main PHP file name
          PHP_FILE="h3-tour-management.php"
          
          # Check if the file exists
          if [ ! -f "$PHP_FILE" ]; then
            echo "Error: $PHP_FILE not found in the root directory."
            echo "Files in current directory:"
            ls -la
            exit 1
          fi
          
          # Get version using more compatible grep pattern
          VERSION=$(grep -E "Version:[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+" "$PHP_FILE" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -n 1)
          if [ -z "$VERSION" ]; then
            echo "Error: No version found in $PHP_FILE."
            echo "First 10 lines of file:"
            head -n 10 "$PHP_FILE"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Check if version changed
        id: check_version
        run: |
          # Hardcode the main PHP file name for reliability
          MAIN_PHP_FILE="h3-tour-management.php"
          
          # Check if the file exists
          if [ ! -f "$MAIN_PHP_FILE" ]; then
            echo "Error: Main PHP file not found: $MAIN_PHP_FILE"
            echo "Files in current directory:"
            ls -la
            exit 1
          fi
          
          # Get current version more safely
          CURRENT_VERSION=$(grep -E "Version:[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+" "$MAIN_PHP_FILE" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -n 1)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract current version from $MAIN_PHP_FILE"
            echo "First 10 lines of file:"
            head -n 10 "$MAIN_PHP_FILE"
            exit 1
          fi
          
          # Try to get the previous version
          PREVIOUS_VERSION=""
          if git show HEAD~1:"$MAIN_PHP_FILE" &>/dev/null; then
            PREVIOUS_VERSION=$(git show HEAD~1:"$MAIN_PHP_FILE" | grep -E "Version:[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -n 1)
          fi
          
          # If previous version couldn't be found, default to 0.0.0
          if [ -z "$PREVIOUS_VERSION" ]; then
            PREVIOUS_VERSION="0.0.0"
            echo "Warning: Could not determine previous version, defaulting to $PREVIOUS_VERSION"
          fi
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$PREVIOUS_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "create_release=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "create_release=false" >> $GITHUB_OUTPUT
          fi

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check_version
    if: needs.check_version.outputs.create_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.check_version.outputs.version }}
          name: Version ${{ needs.check_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release version ${{ needs.check_version.outputs.version }}

            See the commit history for changes in this release.
