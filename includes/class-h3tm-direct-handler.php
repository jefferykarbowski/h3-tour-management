<?php
/**
 * Direct PHP Handler - Standalone file in web root approach
 * This creates a direct PHP handler that bypasses WordPress entirely
 */
class H3TM_Direct_Handler {

    public function __construct() {
        // Create the direct handler file during initialization
        add_action('admin_init', array($this, 'ensure_direct_handler_file'));
        add_action('wp_ajax_h3tm_regenerate_handler', array($this, 'regenerate_handler_file'));
    }

    /**
     * Ensure the direct handler file exists in web root
     */
    public function ensure_direct_handler_file() {
        $handler_path = ABSPATH . 'h3panos-direct.php';

        // Only create if it doesn't exist or is outdated
        if (!file_exists($handler_path) || $this->is_handler_outdated($handler_path)) {
            $this->create_direct_handler_file($handler_path);
        }
    }

    /**
     * Check if handler file is outdated
     */
    private function is_handler_outdated($handler_path) {
        if (!file_exists($handler_path)) {
            return true;
        }

        $content = file_get_contents($handler_path);

        // Check for version marker
        if (!preg_match('/H3TM_DIRECT_VERSION.*?(\d+\.\d+\.\d+)/', $content, $matches)) {
            return true;
        }

        // Compare with current plugin version
        return version_compare($matches[1], H3TM_VERSION, '<');
    }

    /**
     * Create the direct handler PHP file
     */
    private function create_direct_handler_file($handler_path) {
        $s3_simple = new H3TM_S3_Simple();
        $s3_config = $s3_simple->get_s3_config();

        // Get WordPress database credentials for config access
        $wp_config_path = $this->find_wp_config();

        $handler_content = $this->generate_handler_content($s3_config, $wp_config_path);

        if (file_put_contents($handler_path, $handler_content) !== false) {
            error_log('H3TM Direct Handler: Created handler file at: ' . $handler_path);

            // Create .htaccess rule to redirect h3panos URLs to handler
            $this->create_htaccess_rule($handler_path);
        } else {
            error_log('H3TM Direct Handler: Failed to create handler file');
        }
    }

    /**
     * Find wp-config.php location
     */
    private function find_wp_config() {
        $possible_paths = array(
            ABSPATH . 'wp-config.php',
            dirname(ABSPATH) . '/wp-config.php'
        );

        foreach ($possible_paths as $path) {
            if (file_exists($path)) {
                return $path;
            }
        }

        return ABSPATH . 'wp-config.php'; // Default fallback
    }

    /**
     * Generate the standalone handler PHP content
     */
    private function generate_handler_content($s3_config, $wp_config_path) {
        $ga_tracking_id = get_option('h3tm_ga_tracking_id', '');
        $analytics_enabled = get_option('h3tm_analytics_enabled', false) ? 'true' : 'false';

        return '<?php
/**
 * H3TM Direct Tour Handler - Standalone PHP file
 * Generated by H3 Tour Management Plugin v' . H3TM_VERSION . '
 * H3TM_DIRECT_VERSION: ' . H3TM_VERSION . '
 *
 * This file handles /h3panos/ URLs directly without WordPress
 * It serves S3 tour content and injects analytics
 */

// Configuration
define(\'H3TM_S3_BUCKET\', \'' . addslashes($s3_config['bucket']) . '\');
define(\'H3TM_S3_REGION\', \'' . addslashes($s3_config['region']) . '\');
define(\'H3TM_GA_TRACKING_ID\', \'' . addslashes($ga_tracking_id) . '\');
define(\'H3TM_ANALYTICS_ENABLED\', ' . $analytics_enabled . ');
define(\'H3TM_WP_CONFIG_PATH\', \'' . addslashes($wp_config_path) . '\');

// Error reporting for debugging (disable in production)
error_reporting(E_ALL);
ini_set(\'display_errors\', 0);
ini_set(\'log_errors\', 1);

/**
 * Main handler class
 */
class H3TM_Standalone_Handler {

    private $request_uri;
    private $tour_name;
    private $file_path;

    public function __construct() {
        $this->request_uri = $_SERVER[\'REQUEST_URI\'] ?? \'\';
        $this->process_request();
    }

    /**
     * Process the incoming request
     */
    private function process_request() {
        // Parse the URL
        if (!$this->parse_url()) {
            $this->send_404(\'Invalid tour URL format\');
            return;
        }

        // Validate S3 configuration
        if (empty(H3TM_S3_BUCKET) || empty(H3TM_S3_REGION)) {
            $this->send_error(503, \'Tour service not configured\');
            return;
        }

        // Serve the content
        $this->serve_tour_content();
    }

    /**
     * Parse the incoming URL
     */
    private function parse_url() {
        // Remove query parameters
        $url = strtok($this->request_uri, \'?\');

        // Remove leading slash and decode
        $url = ltrim($url, \'/\');
        $url = urldecode($url);

        // Match h3panos pattern
        if (!preg_match(\'#^h3panos/([^/]+)(?:/(.*))?$#\', $url, $matches)) {
            return false;
        }

        $this->tour_name = $this->sanitize_tour_name($matches[1]);
        $this->file_path = isset($matches[2]) && !empty($matches[2]) ? $matches[2] : \'index.htm\';

        error_log(\'H3TM Direct: Parsed tour=\' . $this->tour_name . \', file=\' . $this->file_path);

        return true;
    }

    /**
     * Sanitize tour name
     */
    private function sanitize_tour_name($name) {
        $name = rawurldecode($name);
        $name = str_replace(array(\'%20\', \'+\'), \' \', $name);
        $name = preg_replace(\'/[^\w\s\-_.]/\', \'\', $name);
        return trim($name);
    }

    /**
     * Serve tour content from S3
     */
    private function serve_tour_content() {
        $tour_s3_name = $this->sanitize_filename($this->tour_name);
        $s3_url = \'https://\' . H3TM_S3_BUCKET . \'.s3.\' . H3TM_S3_REGION . \'.amazonaws.com/tours/\' . $tour_s3_name . \'/\' . $this->file_path;

        error_log(\'H3TM Direct: Serving from S3: \' . $s3_url);

        // Get content from S3
        $context = stream_context_create([
            \'http\' => [
                \'timeout\' => 30,
                \'user_agent\' => \'H3TM-Direct-Handler/\' . \'' . H3TM_VERSION . '\'
            ]
        ]);

        $content = @file_get_contents($s3_url, false, $context);

        if ($content === false) {
            // Check if it\'s a file not found vs tour not found
            $index_url = \'https://\' . H3TM_S3_BUCKET . \'.s3.\' . H3TM_S3_REGION . \'.amazonaws.com/tours/\' . $tour_s3_name . \'/index.htm\';
            $headers = @get_headers($index_url);

            if ($headers && strpos($headers[0], \'200\') === false) {
                $this->send_404(\'Tour not found: \' . htmlspecialchars($this->tour_name));
            } else {
                $this->send_404(\'File not found: \' . htmlspecialchars($this->file_path));
            }
            return;
        }

        // Get content type
        $content_type = $this->get_content_type($this->file_path);

        // Inject analytics for HTML files
        if (H3TM_ANALYTICS_ENABLED && strpos($content_type, \'text/html\') !== false && !empty(H3TM_GA_TRACKING_ID)) {
            $content = $this->inject_analytics($content);
        }

        // Set headers
        $this->set_headers($content_type, strlen($content));

        // Output content
        echo $content;
    }

    /**
     * Inject Google Analytics
     */
    private function inject_analytics($content) {
        $analytics_code = \'
<!-- Google Analytics 4 - Injected by H3TM Direct Handler -->
<script async src="https://www.googletagmanager.com/gtag/js?id=\' . H3TM_GA_TRACKING_ID . \'"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag(\\\'js\\\', new Date());
  gtag(\\\'config\\\', \\\'\' . H3TM_GA_TRACKING_ID . \'\\\', {
    page_title: \\\'H3 Tour: \' . addslashes($this->tour_name) . \'\\\',
    page_path: \\\'/h3panos/\' . addslashes($this->tour_name) . \'/\\\'
  });
</script>\';

        // Try to inject before </head>
        if (stripos($content, \'</head>\') !== false) {
            $content = str_ireplace(\'</head>\', $analytics_code . "\\n</head>", $content);
        }
        // Fallback to before </body>
        elseif (stripos($content, \'</body>\') !== false) {
            $content = str_ireplace(\'</body>\', $analytics_code . "\\n</body>", $content);
        }
        // Last resort: append
        else {
            $content .= "\\n" . $analytics_code;
        }

        return $content;
    }

    /**
     * Set response headers
     */
    private function set_headers($content_type, $content_length) {
        if (!headers_sent()) {
            header(\'Content-Type: \' . $content_type);
            header(\'Content-Length: \' . $content_length);

            // Set caching based on file type
            $ext = strtolower(pathinfo($this->file_path, PATHINFO_EXTENSION));
            $static_extensions = array(\'js\', \'css\', \'png\', \'jpg\', \'jpeg\', \'gif\', \'ico\', \'woff\', \'woff2\');

            if (in_array($ext, $static_extensions)) {
                header(\'Cache-Control: public, max-age=604800, immutable\');
                header(\'Expires: \' . gmdate(\'D, d M Y H:i:s \\\\G\\\\M\\\\T\', time() + 604800));
            } else {
                header(\'Cache-Control: public, max-age=3600\');
                header(\'Expires: \' . gmdate(\'D, d M Y H:i:s \\\\G\\\\M\\\\T\', time() + 3600));
            }

            if (strpos($content_type, \'text/html\') !== false) {
                header(\'X-Frame-Options: SAMEORIGIN\');
                header(\'X-Content-Type-Options: nosniff\');
            }
        }
    }

    /**
     * Get content type for file extension
     */
    private function get_content_type($file_path) {
        $ext = strtolower(pathinfo($file_path, PATHINFO_EXTENSION));

        $types = array(
            \'html\' => \'text/html\',
            \'htm\' => \'text/html\',
            \'js\' => \'application/javascript\',
            \'css\' => \'text/css\',
            \'png\' => \'image/png\',
            \'jpg\' => \'image/jpeg\',
            \'jpeg\' => \'image/jpeg\',
            \'gif\' => \'image/gif\',
            \'svg\' => \'image/svg+xml\',
            \'ico\' => \'image/x-icon\',
            \'mp4\' => \'video/mp4\',
            \'json\' => \'application/json\',
            \'txt\' => \'text/plain\',
            \'pdf\' => \'application/pdf\',
            \'zip\' => \'application/zip\'
        );

        return isset($types[$ext]) ? $types[$ext] : \'application/octet-stream\';
    }

    /**
     * Sanitize filename for S3
     */
    private function sanitize_filename($filename) {
        return preg_replace(\'/[^a-zA-Z0-9._-]/\', \'\', str_replace(\' \', \'-\', $filename));
    }

    /**
     * Send 404 error
     */
    private function send_404($message = \'Not Found\') {
        if (!headers_sent()) {
            header(\'HTTP/1.1 404 Not Found\');
            header(\'Content-Type: text/html\');
        }

        echo \'<!DOCTYPE html>
<html>
<head>
    <title>Tour Not Found</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .error { background: #f8f8f8; border: 1px solid #ddd; padding: 20px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="error">
        <h1>Tour Not Found</h1>
        <p>\' . htmlspecialchars($message) . \'</p>
        <p><a href="/">&larr; Return to homepage</a></p>
    </div>
</body>
</html>\';
        exit();
    }

    /**
     * Send error response
     */
    private function send_error($code, $message) {
        if (!headers_sent()) {
            header(\'HTTP/1.1 \' . $code . \' \' . $message);
            header(\'Content-Type: text/html\');
        }

        echo \'<!DOCTYPE html>
<html>
<head>
    <title>Service Error</title>
</head>
<body>
    <h1>Service Error</h1>
    <p>\' . htmlspecialchars($message) . \'</p>
</body>
</html>\';
        exit();
    }
}

// Initialize the handler
new H3TM_Standalone_Handler();
?>';
    }

    /**
     * Create or update .htaccess rules
     */
    private function create_htaccess_rule($handler_path) {
        $htaccess_path = ABSPATH . '.htaccess';
        $rule_marker = '# H3TM Direct Handler Rules';
        $handler_filename = basename($handler_path);

        $rules = "\n" . $rule_marker . "\n";
        $rules .= "RewriteEngine On\n";
        $rules .= "# Handle h3panos directory requests\n";
        $rules .= "RewriteRule ^h3panos/([^/]+)/?$ /" . $handler_filename . " [L,QSA]\n";
        $rules .= "# Handle h3panos file requests\n";
        $rules .= "RewriteRule ^h3panos/([^/]+)/(.+)$ /" . $handler_filename . " [L,QSA]\n";
        $rules .= "# End H3TM Direct Handler Rules\n\n";

        if (file_exists($htaccess_path)) {
            $htaccess_content = file_get_contents($htaccess_path);

            // Remove existing rules
            $htaccess_content = preg_replace(
                '/\n?' . preg_quote($rule_marker, '/') . '.*?# End H3TM Direct Handler Rules\n\n?/s',
                '',
                $htaccess_content
            );

            // Add new rules at the beginning (after RewriteEngine On if it exists)
            if (strpos($htaccess_content, 'RewriteEngine On') !== false) {
                $htaccess_content = preg_replace(
                    '/(RewriteEngine On\s*\n)/',
                    '$1' . $rules,
                    $htaccess_content, 1
                );
            } else {
                $htaccess_content = $rules . $htaccess_content;
            }
        } else {
            $htaccess_content = $rules;
        }

        if (file_put_contents($htaccess_path, $htaccess_content)) {
            error_log('H3TM Direct Handler: Updated .htaccess with redirect rules');
        } else {
            error_log('H3TM Direct Handler: Failed to update .htaccess');
        }
    }

    /**
     * AJAX handler to regenerate the direct handler file
     */
    public function regenerate_handler_file() {
        check_ajax_referer('h3tm_ajax_nonce', 'nonce');

        if (!current_user_can('manage_options')) {
            wp_die('Unauthorized');
        }

        $handler_path = ABSPATH . 'h3panos-direct.php';

        // Remove existing file
        if (file_exists($handler_path)) {
            unlink($handler_path);
        }

        // Create new file
        $this->create_direct_handler_file($handler_path);

        if (file_exists($handler_path)) {
            wp_send_json_success('Direct handler file regenerated successfully');
        } else {
            wp_send_json_error('Failed to regenerate direct handler file');
        }
    }

    /**
     * Check if direct handler is working
     */
    public function test_direct_handler() {
        $handler_url = home_url('/h3panos-direct.php');

        $response = wp_remote_get($handler_url . '?test=1', array(
            'timeout' => 10,
            'headers' => array(
                'User-Agent' => 'H3TM-Direct-Test/1.0'
            )
        ));

        if (is_wp_error($response)) {
            return array(
                'success' => false,
                'message' => 'Direct handler test failed: ' . $response->get_error_message()
            );
        }

        $response_code = wp_remote_retrieve_response_code($response);

        return array(
            'success' => ($response_code === 200 || $response_code === 404),
            'message' => 'Direct handler responded with status: ' . $response_code,
            'response_code' => $response_code
        );
    }
}